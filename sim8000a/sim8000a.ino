#include "ESP32_MailClient.h"
#include <Tone32.h>
#include<WiFi.h>
#include <WiFiUdp.h>
#include <FirebaseESP32.h>
#include <Wire.h>
#define FIREBASE_HOST "vann-53570.firebaseio.com" // ten host cua firebase
#define FIREBASE_AUTH "LC6fDYVqNO7VVBfoymADdWtLZVl6jr6WVJxhONrF" // ma 
#define WIFI_SSID "Joy"
#define WIFI_PASSWORD "012345678"
FirebaseData firebaseData; //
//man hinh
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//sim800l
#include "Adafruit_FONA.h"
#define SIM800L_RX     27
#define SIM800L_TX     26
#define SIM800L_PWRKEY 4
#define SIM800L_RST    5
#define SIM800L_POWER  23
char* sdt;
char replybuffer[255];
HardwareSerial *sim800lSerial = &Serial1;
Adafruit_FONA sim800l = Adafruit_FONA(SIM800L_PWRKEY);

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout = 0);

#define LED_BLUE  13
#define RELAY 14

#define emailSenderAccount    "aesp5286@gmail.com"    
#define emailSenderPassword   "123456@@"
#define emailRecipient        "taminh39@gmail.com"
#define smtpServer            "smtp.gmail.com"
#define smtpServerPort        465
#define emailSubject          "ESP32"

const unsigned char myBitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xdf, 0xb6, 0xad, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0x7f, 0xff, 0xff, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x2e, 0xff, 0xff, 0xff, 0xff, 0xa7, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0x77, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xe5, 0xff, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf7, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xf7, 0xfe, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfd, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xfd, 0xff, 0xf0, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xfd, 0xbf, 0x80, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xfb, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xf7, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xe7, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xbf, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0x80, 0x01, 0xff, 0x80, 0x00, 0x7f, 0x7f, 0xff, 0xf0,
  0xff, 0xfe, 0xdf, 0x80, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x1f, 0xe7, 0xff, 0xf0,
  0xff, 0xfb, 0xff, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xef, 0xff, 0xf0,
  0xff, 0xfe, 0xfc, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x03, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x01, 0xfe, 0x7f, 0xf0,
  0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0xff, 0xff, 0xf0,
  0xff, 0xd7, 0xe0, 0x01, 0xf3, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x7f, 0xff, 0xf0,
  0xff, 0xff, 0xc0, 0x03, 0xe0, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x3e, 0x3f, 0xf0,
  0xff, 0x3f, 0x80, 0x07, 0xc0, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1f, 0xff, 0xf0,
  0xff, 0xff, 0x80, 0x0f, 0x80, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1f, 0xff, 0xf0,
  0xff, 0xff, 0x00, 0x1f, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0f, 0xff, 0xf0,
  0xff, 0xff, 0x00, 0x1e, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x0f, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x3c, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x07, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x3c, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x78, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x78, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xff, 0xfe, 0x00, 0x78, 0xff, 0xff, 0xff, 0xdf, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xfd, 0xfe, 0x00, 0x38, 0x1f, 0xff, 0xe1, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xcb, 0xf0,
  0xff, 0xfe, 0x00, 0x3c, 0x07, 0x80, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xff, 0xf0,
  0xff, 0x3e, 0x00, 0x3c, 0x00, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x07, 0xe7, 0xf0,
  0xfe, 0x7f, 0x00, 0x1e, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x0f, 0xdf, 0xf0,
  0xff, 0xff, 0x00, 0x1f, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0f, 0xff, 0xf0,
  0xff, 0xdf, 0x80, 0x0f, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x1f, 0x6f, 0xf0,
  0xff, 0xff, 0x80, 0x0f, 0xc0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0xbf, 0xf0,
  0xff, 0xe7, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x3d, 0xff, 0xf0,
  0xff, 0xdf, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xf0,
  0xff, 0xf9, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xf0,
  0xff, 0xfb, 0xf8, 0x00, 0x3f, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xfc, 0xff, 0xf0,
  0xff, 0xff, 0xfc, 0x00, 0x0f, 0x80, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x03, 0xff, 0xff, 0xf0,
  0xff, 0xfd, 0xff, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x0f, 0xfb, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xef, 0xe0, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x7f, 0xbf, 0xff, 0xf0,
  0xff, 0xff, 0xfb, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0x7f, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xdf, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0x5f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xf7, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xaf, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xfa, 0x37, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xb3, 0x7f, 0xff, 0xff, 0x6a, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xb5, 0x6a, 0xde, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};


void setup()
{
  sdt = "+84388424530";
  smtpData.setLogin(smtpServer, smtpServerPort, emailSenderAccount, emailSenderPassword);
    smtpData.setSender("ESP32", emailSenderAccount);
    smtpData.setPriority("High");
  pinMode(LED_BLUE, OUTPUT);
  pinMode(RELAY, OUTPUT);
  pinMode(SIM800L_POWER, OUTPUT);

  digitalWrite(LED_BLUE, HIGH);
  digitalWrite(SIM800L_POWER, HIGH);

  Serial.begin(115200);
  Serial.println(F("ESP32 with GSM SIM800L"));
  Serial.println(F("Initializing....(May take more than 10 seconds)"));

  delay(10000);


  // Make it slow so its easy to read!
  sim800lSerial->begin(4800, SERIAL_8N1, SIM800L_TX, SIM800L_RX);
  if (!sim800l.begin(*sim800lSerial)) {
    Serial.println(F("Couldn't find GSM SIM800L"));
    while (1);
  }
  Serial.println(F("GSM SIM800L is OK"));

  char imei[16] = {0}; // MUST use a 16 character buffer for IMEI!
  uint8_t imeiLen = sim800l.getIMEI(imei);
  if (imeiLen > 0) {
    Serial.print("SIM card IMEI: "); Serial.println(imei);
  }

  // Set up the FONA to send a +CMTI notification
  // when an SMS is received
  sim800lSerial->print("AT+CNMI=2,1\r\n");

  Serial.println("GSM SIM800L Ready");

  display.begin(SSD1306_SWITCHCAPVCC, 0x78 >> 1);
  display.clearDisplay();
  display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();




  WiFi.begin(WIFI_SSID , WIFI_PASSWORD);

  while ( WiFi.status() != WL_CONNECTED ) {
    delay ( 500 );
    Serial.print ( "." );
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(5, 32);
    display.println("Disconnect");
    display.display();
    display.clearDisplay();
  }
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(30, 32);
  display.println("Connect");
  display.display();
  display.clearDisplay();


  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);

}





long prevMillis = 0;
int interval = 1000;

boolean ledState = false;

void loop()
{
  if (millis() - prevMillis > interval) {
    ledState = !ledState;
    digitalWrite(LED_BLUE, ledState);

    prevMillis = millis();
  }

  if (sim800l.available()) // phai co ham nay nha
  {
    display.setTextSize(1);
    display.setCursor(50, 0);
    display.println("Status");

    readGas();
    readFire();
    display.setTextSize(2);
        display.setTextColor(WHITE);
        display.setCursor(55, 32);
        display.println("OK");
        display.display();
        display.clearDisplay();
  }
}
void readGas() {
  //lau1
  if (Firebase.getInt(firebaseData, "Floors1/G") ) {
    if (firebaseData.dataType() == "int") {
      int g1 = firebaseData.intData();
      Serial.print("L1: ");
      Serial.println(g1);
      if (g1 == 0) {
        sim800l.sendSMS(sdt, "Floors1 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors1 Fire");
        display.display();
      
        delay(2000);
      }
    }
  }
  //lau 2
  if (Firebase.getInt(firebaseData, "Floors2/G") ) {
    if (firebaseData.dataType() == "int") {
      int g2 = firebaseData.intData();
      Serial.print("L2: ");
      Serial.println(g2);
      if (g2 == 0) {
        sim800l.sendSMS(sdt, "Floors2 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors2 Fire");
        display.display();
        delay(10000);
      }
    }
  }
  //lau3
  if (Firebase.getInt(firebaseData, "Floors3/G") ) {
    if (firebaseData.dataType() == "int") {
      int g3 = firebaseData.intData();
      Serial.print("L3: ");
      Serial.println(g3);
      if (g3 == 0) {
        sim800l.sendSMS(sdt, "Floors3 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors3 Fire");
        display.display();
        delay(10000);
      }
    }
  }
  //lau4
  if (Firebase.getInt(firebaseData, "Floors4/G") ) {
    if (firebaseData.dataType() == "int") {
      int g4 = firebaseData.intData();
      Serial.print("L4: ");
      Serial.println(g4);
      if (g4 == 0) {
        sim800l.sendSMS(sdt, "Floors4 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors4 Fire");
        display.display();
        delay(10000);
      }

     

    }
  }




}

void readFire() {
  //lau1
  if (Firebase.getInt(firebaseData, "Floors1/F") ) {
    if (firebaseData.dataType() == "int") {
      int F1 = firebaseData.intData();
      Serial.print("F1: ");
      Serial.println(F1);
      if (F1 == 0) {
        sim800l.sendSMS(sdt, "Floors1 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors1 Fire");
        display.display();
        delay(10000);
      }
    }
  }
  //lau 2
  if (Firebase.getInt(firebaseData, "Floors2/F") ) {
    if (firebaseData.dataType() == "int") {
      int F2 = firebaseData.intData();
      Serial.print("F2: ");
      Serial.println(F2);
      if (F2 == 0) {
        sim800l.sendSMS(sdt, "Floors2 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors2 Fire");
        display.display();
        delay(10000);
      }
    }
  }
  //lau3
  if (Firebase.getInt(firebaseData, "Floors3/F") ) {
    if (firebaseData.dataType() == "int") {
      int F3 = firebaseData.intData();
      Serial.print("F3: ");
      Serial.println(F3);
      if (F3 == 0) {
        sim800l.sendSMS(sdt, "Floors3 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors3 Fire");
        display.display();
        delay(10000);
      }
    }
  }
  //lau4
  if (Firebase.getInt(firebaseData, "Floors4/F") ) {
    if (firebaseData.dataType() == "int") {
      int F4 = firebaseData.intData();
      Serial.print("F4: ");
      Serial.println(F4);
      if (F4 == 0) {
        sim800l.sendSMS(sdt, "Floors4 Fire ");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(30, 32);
        display.println("Floors4 Fire");
        display.display();
        delay(10000);
      }
    }
  }

}
